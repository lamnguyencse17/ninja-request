// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  organizations       Organization[]
  organizationMembers OrganizationMember[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  form                Form[]
  attachments         Attachment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String  @id @default(cuid())
  name        String
  description String?
  url         String?
  logo        String?

  owner               User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId             String
  organizationMembers OrganizationMember[]

  forms Form[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ownerId])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  role           String?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([organizationId, userId])
}

model Form {
  id          String       @id @default(cuid())
  name        String
  description String?
  url         String?
  logo        String?
  submissions Submission[]
  questions   Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  createdBy      User          @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById    String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  @@index([createdById])
  @@index([organizationId])
}

model Question {
  id   String @id @default(cuid())
  name String

  content String?  @db.Text
  choices String[] @db.Text

  attachment   Attachment? @relation(fields: [attachmentId], references: [id])
  attachmentId String?     @unique

  questionType   QuestionType @relation(fields: [questionTypeId], references: [id])
  questionTypeId String
  form           Form         @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId         String

  answers Answer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Submission {
  id          String       @id @default(cuid())
  title       String
  content     String       @db.Text
  published   Boolean      @default(false)
  publishedAt DateTime
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  form        Form?        @relation(fields: [formId], references: [id])
  formId      String?
  answers     Answer[]

  @@index([formId])
}

model Answer {
  id           String     @id @default(cuid())
  content      String?    @db.Text
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  attachment   Attachment? @relation(fields: [attachmentId], references: [id])
  attachmentId String?     @unique

  @@index([submissionId, questionId])
}

model Attachment {
  id   String @id @default(cuid())
  name String
  url  String
  size Int
  type String

  submission   Submission? @relation(fields: [submissionId], references: [id])
  submissionId String?

  createdAt   DateTime @default(now())
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  answer     Answer?
  answerId   String?
  question   Question?
  questionId String?

  @@index([submissionId])
  @@index([answerId])
  @@index([questionId])
}

model QuestionType {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  questions Question[]
}
